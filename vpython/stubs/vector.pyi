"""
This is a MyPy stub file for VPython's vector class, to use with MyPy and other
tools that use '.pyi' files to determine static type checking compliance.
"""

from typing import Union, List, Optional

__author__ = "Jim Tooker"

__all__ = ['vector',
           'mag', 'mag2', 'norm', 'hat', 'cross', 'proj', 'dot', 'comp',
           'diff_angle', 'rotate', 'adjust_up', 'adjust_axis', 'object_rotate',
          ]

class vector:
    @staticmethod
    def random() -> 'vector': ...

    def __init__(self, x: float, y: float, z: float) -> None: ...

    def __add__(self, other: 'vector') -> 'vector': ...
    def __sub__(self, other: 'vector') -> 'vector': ...
    def __mul__(self, other: Union[float, 'vector']) -> 'vector': ...
    def __rmul__(self, other: Union[float, 'vector']) -> 'vector': ...
    def __truediv__(self, other: Union[float, 'vector']) -> 'vector': ...
    def __neg__(self) -> 'vector': ...
    def __pos__(self) -> 'vector': ...
    def __eq__(self: object, other: object) -> bool: ...
    def __neq__(self: object, other: object) -> bool: ...

    @property
    def x(self) -> float: ...
    @x.setter
    def x(self, value: float) -> None: ...

    @property
    def y(self) -> float: ...
    @y.setter
    def y(self, value: float) -> None: ...

    @property
    def z(self) -> float: ...
    @z.setter
    def z(self, value: float) -> None: ...

    @property
    def mag(self) -> float: ...
    @mag.setter
    def mag(self, value: float) -> None: ...

    @property
    def mag2(self) -> float: ...
    @mag2.setter
    def mag2(self, value: float) -> None: ...

    @property
    def hat(self) -> 'vector': ...
    @hat.setter
    def hat(self, value: 'vector') -> None: ...

    @property
    def value(self) -> List[float]: ...

    def norm(self) -> 'vector': ...
    def dot(self, other: 'vector') -> float: ...
    def cross(self, other: 'vector') -> 'vector': ...
    def proj(self, other: 'vector') -> 'vector': ...
    def equals(self, other: 'vector') -> bool: ...
    def comp(self, other: 'vector') -> float: ...
    def diff_angle(self, other: 'vector') -> float: ...
    def rotate(self, angle: float = ..., axis: Optional[vector] = ...) -> 'vector': ...
    def rotate_in_place(self, angle: float = ..., axis: Optional[vector] = ...) -> None: ...


# Class methods
def mag(A: vector) -> float: ...
def mag2(A: vector) -> float: ...
def norm(A: vector) -> vector: ...
def hat(A: vector) -> vector: ...
def cross(A: vector) -> vector: ...
def proj(A: vector) -> vector: ...
def dot(A: vector, B: vector) -> float: ...
def comp(A: vector) -> float: ...
def diff_angle(A: vector, B: vector) -> float: ...
def rotate(A: vector, angle: float = ..., axis: Optional[vector] = ...) -> vector: ...
def adjust_up(oldaxis: vector, newaxis: vector, up: vector, save_oldaxis: Optional[vector]) -> Optional[vector]: ...
def adjust_axis(oldup: vector, newup: vector, axis: vector, save_oldup: Optional[vector]) -> Optional[vector]: ...
def object_rotate(objaxis: vector, objup: vector, angle: float, axis: vector) -> None: ...
